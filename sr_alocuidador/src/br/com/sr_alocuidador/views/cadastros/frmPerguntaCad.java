/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.com.sr_alocuidador.views.cadastros;

import br.com.sr_alocuidador.daos.CategoriaPerguntaDAO;
import br.com.sr_alocuidador.daos.PerguntaDAO;
import br.com.sr_alocuidador.models.CategoriaPergunta;
import br.com.sr_alocuidador.models.Pergunta;
import java.sql.SQLException;
import java.util.List;
import javax.swing.JOptionPane;

/**
 *
 * @author plima
 */
public class frmPerguntaCad extends javax.swing.JDialog {

    private PerguntaDAO daoPergunta;
    private CategoriaPerguntaDAO daoCategoriaPergunta;
    public int xcodigo;
    private List<CategoriaPergunta> listaCategoriaPergunta;
    
    public frmPerguntaCad(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblNome = new javax.swing.JLabel();
        txtNome = new javax.swing.JTextField();
        lblCategoria = new javax.swing.JLabel();
        cmbCategoria = new javax.swing.JComboBox<>();
        lblDestino = new javax.swing.JLabel();
        cmbDestino = new javax.swing.JComboBox<>();
        btnGravar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Perguntas");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        lblNome.setText("Descrição:");

        lblCategoria.setText("Categoria:");

        lblDestino.setText("Destino:");

        cmbDestino.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "SELECIONE", "PACIENTE", "CUIDADOR" }));

        btnGravar.setText("Gravar");
        btnGravar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGravarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtNome)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblNome)
                            .addComponent(lblCategoria)
                            .addComponent(cmbCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblDestino)
                            .addComponent(cmbDestino, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnGravar))
                        .addGap(0, 356, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblNome)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lblCategoria)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmbCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lblDestino)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmbDestino, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnGravar)
                .addContainerGap(27, Short.MAX_VALUE))
        );

        setSize(new java.awt.Dimension(644, 301));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        daoPergunta = new PerguntaDAO();
        daoCategoriaPergunta = new CategoriaPerguntaDAO();
        try {
            preencheCategoria();
            pesquisar();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Erro ao pesquisar: " + ex.toString());
        }
    }//GEN-LAST:event_formWindowOpened

    private void btnGravarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGravarActionPerformed
        if (validaDados()){
            try {
                gravar();
                JOptionPane.showMessageDialog(null, "Registro gravado com sucesso.");
                this.setVisible(false);
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, "Erro ao gravar o registro: " + ex.toString());
            }
        }
    }//GEN-LAST:event_btnGravarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmPerguntaCad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmPerguntaCad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmPerguntaCad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmPerguntaCad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                frmPerguntaCad dialog = new frmPerguntaCad(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnGravar;
    private javax.swing.JComboBox<Object> cmbCategoria;
    private javax.swing.JComboBox<String> cmbDestino;
    private javax.swing.JLabel lblCategoria;
    private javax.swing.JLabel lblDestino;
    private javax.swing.JLabel lblNome;
    private javax.swing.JTextField txtNome;
    // End of variables declaration//GEN-END:variables

    private void pesquisar() throws SQLException {
        
        Pergunta p = daoPergunta.BuscarPorId(xcodigo);
        if (p != null){
            txtNome.setText(p.getNome());
            for(int i = 0; i < listaCategoriaPergunta.size(); i++){
                if (listaCategoriaPergunta.get(i).getCodigo() == p.getCategoria().getCodigo()){
                    cmbCategoria.setSelectedIndex(i);
                }
            }
            if ("P".equals(p.getDestino())){
                cmbDestino.setSelectedIndex(1);
            } else if ("C".equals(p.getDestino())){
                cmbDestino.setSelectedIndex(2);
            } else {
                cmbDestino.setSelectedIndex(0);
            }
        }
        
    }

    private void preencheCategoria() throws SQLException {
        cmbCategoria.removeAllItems();
        listaCategoriaPergunta = daoCategoriaPergunta.listarTodos();
        for(CategoriaPergunta cp : listaCategoriaPergunta){
            cmbCategoria.addItem(cp);
        }
        cmbCategoria.setSelectedIndex(-1);
        
    }
    
    private boolean validaDados(){
        
        if ("".equals(txtNome.getText())){
            JOptionPane.showMessageDialog(null, "Nome não informado.");
            txtNome.setFocusable(true);
            return false;
        } else if (cmbCategoria.getSelectedIndex() < 0){
            JOptionPane.showMessageDialog(null, "Categoria não informada");
            cmbCategoria.setFocusable(true);
            return false;
        } else if (cmbDestino.getSelectedIndex() == 0){
            JOptionPane.showMessageDialog(null, "Destino não informado");
            cmbDestino.setFocusable(true);
            return false;
        } else return true;
        
    }
    
    private void gravar() throws SQLException{
        
        Pergunta c = new Pergunta();
        c.setCodigo(xcodigo);
        c.setCategoria(((CategoriaPergunta)cmbCategoria.getSelectedItem()));
        c.setNome(txtNome.getText());
        switch (cmbDestino.getSelectedIndex()) {
            case 1:
                c.setDestino("P");
                break;
            case 2:
                c.setDestino("C");
                break;
            default:
                c.setDestino("N");
                break;
        }
        daoPergunta.validaDados(c);
    }
}
