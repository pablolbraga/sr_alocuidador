/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.com.sr_alocuidador.views.movimentacao;

import br.com.sr_alocuidador.daos.ConstantesItemDAO;
import br.com.sr_alocuidador.daos.PacienteDAO;
import br.com.sr_alocuidador.daos.PacienteMedicamentoDAO;
import br.com.sr_alocuidador.models.ConstantesItem;
import br.com.sr_alocuidador.models.PacienteMedicamento;
import java.sql.SQLException;
import java.util.List;
import javax.swing.JOptionPane;

/**
 *
 * @author plima
 */
public class frmPacienteMedicamentoCad extends javax.swing.JDialog {

    public int xcodigo;
    public int xcodpaciente;
    private List<ConstantesItem> listarTurnos;
    
    /**
     * Creates new form frmPacienteMedicamentoCad
     */
    public frmPacienteMedicamentoCad(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblDescricao = new javax.swing.JLabel();
        txtDescricao = new javax.swing.JTextField();
        lblDosagem = new javax.swing.JLabel();
        txtDosagem = new javax.swing.JTextField();
        lblTurno = new javax.swing.JLabel();
        cmbTurno = new javax.swing.JComboBox<>();
        lblHorario = new javax.swing.JLabel();
        txtHorario = new javax.swing.JTextField();
        lblAprazamento = new javax.swing.JLabel();
        txtAprazamento = new javax.swing.JTextField();
        lblPrescritor = new javax.swing.JLabel();
        txtPrescritor = new javax.swing.JTextField();
        lblObservacao = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtObservacao = new javax.swing.JTextArea();
        btnGravar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Medicamentos");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        lblDescricao.setText("Descrição:");

        lblDosagem.setText("Dosagem:");

        lblTurno.setText("Turno:");

        lblHorario.setText("Horário:");

        lblAprazamento.setText("Aprazamento:");

        lblPrescritor.setText("Prescritor:");

        lblObservacao.setText("Observação:");

        txtObservacao.setColumns(20);
        txtObservacao.setRows(5);
        jScrollPane1.setViewportView(txtObservacao);

        btnGravar.setText("Gravar");
        btnGravar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGravarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane1)
                        .addComponent(txtDescricao)
                        .addComponent(txtAprazamento)
                        .addComponent(txtPrescritor)
                        .addComponent(lblObservacao)
                        .addComponent(lblDescricao)
                        .addComponent(lblDosagem)
                        .addComponent(txtDosagem, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblAprazamento)
                        .addComponent(lblPrescritor)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(lblTurno)
                                    .addGap(0, 175, Short.MAX_VALUE))
                                .addComponent(cmbTurno, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGap(18, 18, 18)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(txtHorario, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lblHorario))))
                    .addComponent(btnGravar))
                .addGap(18, 18, 18))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblDescricao)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtDescricao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lblDosagem)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtDosagem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblTurno)
                            .addComponent(lblHorario))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbTurno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(txtHorario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(lblAprazamento)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtAprazamento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lblPrescritor)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtPrescritor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lblObservacao)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnGravar)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        setSize(new java.awt.Dimension(448, 508));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        try {        
            listarTurnos = ConstantesItemDAO.listarContantes(30);
            PreencheTurnos();
            Pesquisar();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Erro ao preencher os turnos: " + ex.toString());
        }
    }//GEN-LAST:event_formWindowOpened

    private void btnGravarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGravarActionPerformed
        if (ValidaDados()){
            try {
                Gravar();
                JOptionPane.showMessageDialog(null, "Registro gravado com sucesso.");
                this.setVisible(false);
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, "Erro ao gravar o medicamento: " + ex.toString());
            }
        }
    }//GEN-LAST:event_btnGravarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmPacienteMedicamentoCad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmPacienteMedicamentoCad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmPacienteMedicamentoCad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmPacienteMedicamentoCad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                frmPacienteMedicamentoCad dialog = new frmPacienteMedicamentoCad(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnGravar;
    private javax.swing.JComboBox<Object> cmbTurno;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblAprazamento;
    private javax.swing.JLabel lblDescricao;
    private javax.swing.JLabel lblDosagem;
    private javax.swing.JLabel lblHorario;
    private javax.swing.JLabel lblObservacao;
    private javax.swing.JLabel lblPrescritor;
    private javax.swing.JLabel lblTurno;
    private javax.swing.JTextField txtAprazamento;
    private javax.swing.JTextField txtDescricao;
    private javax.swing.JTextField txtDosagem;
    private javax.swing.JTextField txtHorario;
    private javax.swing.JTextArea txtObservacao;
    private javax.swing.JTextField txtPrescritor;
    // End of variables declaration//GEN-END:variables

    private void PreencheTurnos() throws SQLException {
        cmbTurno.removeAllItems();
        for(ConstantesItem ci : listarTurnos){
            cmbTurno.addItem(ci);
        }
    }

    private void Pesquisar() throws SQLException {
        PacienteMedicamento p = PacienteMedicamentoDAO.buscarPorId(xcodigo);
        if (p != null){
            txtDescricao.setText(p.getDescricao());
            txtDosagem.setText(p.getDosagem());
            
            for(int i = 0; i < listarTurnos.size(); i++){
                if (listarTurnos.get(i).getIndice() == p.getTurno().getIndice()){
                    cmbTurno.setSelectedIndex(i);
                }
            }
            
            txtHorario.setText(p.getHorario());
            txtAprazamento.setText(p.getAprazamento());
            txtPrescritor.setText(p.getPrescritor());
            txtObservacao.setText(p.getObservacao());
        }
    }
    
    private boolean ValidaDados(){
        
        if ("".equals(txtDescricao.getText())){
            JOptionPane.showMessageDialog(null, "Descrição não informada.");
            return false;
        }
        else if ("".equals(txtDosagem.getText())){
            JOptionPane.showMessageDialog(null, "Dosagem não informada.");
            return false;
        }
        else if ("".equals(txtHorario.getText())){
            JOptionPane.showMessageDialog(null, "Horário não informado.");
            return false;
        }
        else if ("".equals(txtAprazamento.getText())){
            JOptionPane.showMessageDialog(null, "Aprazamento não informado.");
            return false;
        }
        else return true;
        
    }
    
    private void Gravar() throws SQLException{
        
        PacienteMedicamento c = new PacienteMedicamento();
        c.setCodigo(xcodigo);
        c.setPaciente(PacienteDAO.buscarPorId(xcodpaciente));
        c.setDescricao(txtDescricao.getText());
        c.setDosagem(txtDosagem.getText());
        c.setTurno((ConstantesItem)cmbTurno.getSelectedItem());
        c.setHorario(txtHorario.getText());
        c.setAprazamento(txtAprazamento.getText());
        c.setPrescritor(txtPrescritor.getText());
        c.setObservacao(txtObservacao.getText());
        PacienteMedicamentoDAO.validaDados(c);
    }
}
